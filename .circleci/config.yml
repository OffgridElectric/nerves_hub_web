defaults: &defaults
  docker:
    - image: nerveshub/docker-build:alpine-3.15.3
  working_directory: ~/repo

remote_docker: &remote_docker
  setup_remote_docker:
    version: 20.10.11

docker_env: &docker_env
  run:
    name: Set docker env
    command: |
      if [ -z "$CIRCLE_TAG" ]; then
      BRANCH=$(git rev-parse --abbrev-ref HEAD)
        SHA=$(git rev-parse --short HEAD)
        TAG=$(echo "v.$BRANCH.$SHA" | sed 's/\//_/g')
      else
        TAG=$CIRCLE_TAG
      fi
      VERSION=$(tr -d '\n' < VERSION)

      echo "export DOCKER_TAG=$TAG" >> $BASH_ENV
      echo "export DOCKER_VERSION_TAG=$VERSION" >> $BASH_ENV
      echo "export BRANCH=$CIRCLE_BRANCH" >> $BASH_ENV
      echo "export DOCKER_REGISTRY=005352568091.dkr.ecr.eu-west-1.amazonaws.com" >> $BASH_ENV

docker_build_release: &docker_build_release
  run:
    name: Build docker images
    command: |
      docker build \
        -t $DOCKER_REGISTRY/$APP_NAME:$DOCKER_TAG \
        -t $DOCKER_REGISTRY/$APP_NAME:$DOCKER_VERSION_TAG \
        -t $DOCKER_REGISTRY/$APP_NAME:$BRANCH \
        -t $DOCKER_REGISTRY/$APP_NAME:latest \
        -f apps/$APP_NAME/rel/Dockerfile.build .

docker_save: &docker_save
  run:
    name: Save docker images
    command: |
      mkdir -p /docker
      docker save \
        $DOCKER_REGISTRY/$APP_NAME:$DOCKER_TAG \
        -o /docker/$APP_NAME-$DOCKER_TAG.tar
      docker save \
        $DOCKER_REGISTRY/$APP_NAME:$DOCKER_VERSION_TAG \
        -o /docker/$APP_NAME-$DOCKER_VERSION_TAG.tar
      docker save \
        $DOCKER_REGISTRY/$APP_NAME:latest \
        -o /docker/$APP_NAME-latest.tar
      docker save \
        $DOCKER_REGISTRY/$APP_NAME:$BRANCH \
        -o /docker/$APP_NAME-$BRANCH.tar

docker_import: &docker_import
  run:
    name: Import docker images
    command: |
      docker load \
        -i /docker/$APP_NAME-$DOCKER_TAG.tar
      docker load \
        -i /docker/$APP_NAME-$DOCKER_VERSION_TAG.tar
      docker load \
        -i /docker/$APP_NAME-latest.tar
      docker load \
        -i /docker/$APP_NAME-$BRANCH.tar

docker_push: &docker_push
  run: 
    name: Push docker images to ECR
    command: |
      aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 005352568091.dkr.ecr.eu-west-1.amazonaws.com
      docker push $DOCKER_REGISTRY/$APP_NAME:$DOCKER_TAG
      docker push $DOCKER_REGISTRY/$APP_NAME:$BRANCH

aws_login: &aws_login
  aws-cli/setup:
    aws-access-key-id: AWS_ACCESS_KEY_ID
    aws-secret-access-key: AWS_SECRET_ACCESS_KEY
    aws-region: AWS_REGION_NAME        

redeploy-service: &redeploy-service
  run:
    name: Redeploy tasks
    command: |
      for i in nerves-hub-device nerves-hub-api nerves-hub-www; do
        aws ecs update-service --cluster $CLUSTER --service $i --force-new-deployment 
      done 

version: 2.1
orbs:
  docker: circleci/docker@2.0.3
  aws-cli: circleci/aws-cli@3.1.3
jobs:
  fetch_deps:
    docker:
      - image: hexpm/elixir:1.14.2-erlang-25.2-alpine-3.15.6
        environment:
          MIX_ENV: test
    working_directory: ~/app

    steps:
      - checkout
      - run: apk add build-base git
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: mix do deps.get
      - save_cache:
          key: mix-deps-v2-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"

  test_elixir:
    docker:
      - image: hexpm/elixir:1.14.2-erlang-25.2-alpine-3.15.6
        environment:
          MIX_ENV: test
          DATABASE_URL: postgres://db:db@localhost:5432/db
          SECRET_KEY_BASE: ${SECRET_KEY_BASE:-BGC824f8kh1IQPXK7bUmXDigrw404rA7rivR96vGv4bhMIRogiaFN7Z6R4duZClA}
          LIVE_VIEW_SIGNING_SALT: ${LIVE_VIEW_SIGNING_SALT:-2GiUN2NDLEnYT8I/3Q+XL6LGUGEKGogh}
          COVERALLS_REPO_TOKEN: UrUe0yTdaISMj214UUZgj0H1y79UlsTX2
      - image: cimg/postgres:12.12
        environment:
          POSTGRES_USER: db
          POSTGRES_DB: db
          POSTGRES_PASSWORD: db
    working_directory: ~/app
    steps:
      - checkout
      - run: apk add build-base git fwup curl sudo
      - docker/install-dockerize
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - restore_cache:
          keys:
            - mix-deps-v2-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run: mix compile
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Test
          command: mix test
      - run:
          name: Verify formatting
          command: mix format --check-formatted
      - run:
          name: Copy test certs into place for release config
          command: |
            cp test/fixtures/ssl/user-root-ca.pem /etc/ssl/
            cp test/fixtures/ssl/root-ca.pem /etc/ssl/
      - run:
          name: Test API release.exs
          command: mix eval 'Config.Reader.read!("apps/nerves_hub_api/config/release.exs")'
          environment:
            AWS_REGION: region
            CA_HOST: localhost
            HOST: localhost
            S3_BUCKET_NAME: bucket
            S3_LOG_BUCKET_NAME: bucket-log
            SES_PORT: 2525
            SES_SERVER: server
            SMTP_PASSWORD: password
            SMTP_USERNAME: username
      - run:
          name: Test Device release.exs
          command: mix eval 'Config.Reader.read!("apps/nerves_hub_device/config/release.exs")'
          environment:
            AWS_REGION: region
            HOST: localhost
            S3_BUCKET_NAME: bucket
            S3_LOG_BUCKET_NAME: bucket-log
            SES_PORT: 2525
            SES_SERVER: server
            SMTP_PASSWORD: password
            SMTP_USERNAME: username
      - run:
          name: Test WWW release.exs
          command: mix eval 'Config.Reader.read!("apps/nerves_hub_www/config/release.exs")'
          environment:
            AWS_REGION: region
            HOST: localhost
            LIVE_VIEW_SIGNING_SALT: signing-salt
            S3_BUCKET_NAME: bucket
            S3_LOG_BUCKET_NAME: bucket-log
            SECRET_KEY_BASE: secret-key-base
            SES_PORT: 2525
            SES_SERVER: server
            SMTP_PASSWORD: password
            SMTP_USERNAME: username

  test_javascript:
    docker:
      - image: circleci/node:14.4.0
    working_directory: ~/app/apps/nerves_hub_www/assets
    steps:
      - checkout:
          path: ~/app
      - restore_cache:
          keys:
            - mix-deps-v2-{{ .Branch }}-{{ checksum "../../../mix.lock" }}
      - run: npm install
      - run:
          name: Verify formatting
          command: npm run check_formatting
      - run:
          name: ESLint
          command: npm run lint
      - run:
          name: Test
          command: npm run test

  build-www:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_www" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - <<: *docker_build_release
      - <<: *docker_save
      - save_cache:
          key: docker-www-{{ .Branch }}-{{ .Revision }}
          paths: ["/docker"]

  build-device:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_device" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - <<: *docker_build_release
      - <<: *docker_save
      - save_cache:
          key: docker-device-{{ .Branch }}-{{ .Revision }}
          paths: ["/docker"]

  build-api:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_api" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - <<: *docker_build_release
      - <<: *docker_save
      - save_cache:
          key: docker-api-{{ .Branch }}-{{ .Revision }}
          paths: ["/docker"]

  push-www:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_www" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - restore_cache:
          keys:
            - docker-www-{{ .Branch }}-{{ .Revision }}
      - <<: *docker_import
      - <<: *aws_login
      - <<: *docker_push

  push-device:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_device" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - restore_cache:
          keys:
            - docker-device-{{ .Branch }}-{{ .Revision }}
      - <<: *docker_import
      - <<: *aws_login
      - <<: *docker_push

  push-api:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_api" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - restore_cache:
          keys:
            - docker-api-{{ .Branch }}-{{ .Revision }}
      - <<: *docker_import
      - <<: *aws_login
      - <<: *docker_push

  deploy-staging:
    <<: *defaults
    steps:
      - run: echo "export CLUSTER=nerves-hub-staging" >> $BASH_ENV
      - <<: *aws_login
      - <<: *redeploy-service   

  deploy-prod:
    <<: *defaults
    steps:
      - run: echo "export CLUSTER=nerves-hub" >> $BASH_ENV
      - run: echo "export services=[nerves-hub-device,nerves-hub-api,nerves-hub-www]" >> $BASH_ENV
      - <<: *aws_login
      - <<: *redeploy-service    

workflows:
  version: 2
  pipeline:
      jobs:
        - fetch_deps:
            filters:
              tags:
                only: /.*/
        - test_elixir:
            requires:
              - fetch_deps
            filters:
              tags:
                only: /.*/
        - build-www:
            context: aws
            requires:
              - test_elixir
            filters:
              tags:
                only: /.*/
        - build-device:
            context: aws
            requires:
              - test_elixir
            filters:
              tags:
                only: /.*/
        - build-api:
            context: aws
            requires:
              - test_elixir
            filters:
              tags:
                only: /.*/
        - push-www:
            context: aws-infra
            requires:
              - build-www
            filters:
              branches:
                only: [main,develop]
        - push-device:
            context: aws-infra
            requires:
              - build-device
            filters:
              branches:
                only: [main,develop]
        - push-api:
            context: aws-infra
            requires:
              - build-api
            filters:
              branches:
                only: [main,develop]
        - deploy-staging:
            context: aws-infra
            requires: 
              - push-api
              - push-device
              - push-www
            filters:
              branches: 
                only: [develop]  
        - deploy-prod:
            context: aws-prod
            requires: 
              - push-api
              - push-device
              - push-www
            filters:
              branches: 
                only: [main]                 
